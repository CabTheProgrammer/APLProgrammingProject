
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'rightEQUALleftPLUSMINUSleftMULTIPLYDIVIDErightUMINUSCOLON COMMA DIVIDE EQUAL EXPONENTIAL FLOATNUMBER LPAREN MINUS MULTIPLY NUMBER PLUS POINT PRINT QUOTE RPAREN STRING WORD\n    stmt : WORD EQUAL expression  \n         | WORD EQUAL STRING\n         \n    \n    stmt : expression\n         \n    \n        expression  : expression PLUS term\n                    | expression PLUS expression\n                    |       term PLUS expression\n                    | expression MINUS term\n                    |       term MINUS expression\n                    | expression MINUS expression\n                    | expression EXPONENTIAL term\n                    |       term EXPONENTIAL expression\n                    | expression EXPONENTIAL expression\n                    | expression MULTIPLY term\n                    |       term MULTIPLY  expression\n                    | expression MULTIPLY expression\n                    | expression DIVIDE term\n                    |       term DIVIDE expression\n                    | expression DIVIDE expression\n    \n    expression : WORD\n    \n    expression : MINUS expression %prec UMINUS\n    \n        expression : term\n    \n            term : term DIVIDE factor\n                 | term MULTIPLY factor\n                \n        \n            term : factor\n        \n       factor :  NUMBER\n              |  FLOATNUMBER\n              |  LPAREN expression RPAREN\n    '
    
_lr_action_items = {'WORD':([0,5,9,10,11,12,13,14,15,16,17,18,19,20,44,45,],[2,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,]),'MINUS':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,],[5,-19,12,17,5,-24,-25,-26,5,5,5,5,5,5,5,5,5,5,5,5,-20,-19,12,12,-5,-4,-9,-7,12,17,-15,-13,-18,-16,-6,-8,12,-14,-23,-17,-22,-27,5,5,]),'NUMBER':([0,5,9,10,11,12,13,14,15,16,17,18,19,20,44,45,],[7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,7,]),'FLOATNUMBER':([0,5,9,10,11,12,13,14,15,16,17,18,19,20,44,45,],[8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,]),'LPAREN':([0,5,9,10,11,12,13,14,15,16,17,18,19,20,44,45,],[9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,]),'$end':([1,2,3,4,6,7,8,21,22,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,],[0,-19,-3,-21,-24,-25,-26,-20,-19,-1,-2,-5,-4,-9,-7,-12,-10,-15,-13,-18,-16,-6,-8,-11,-14,-23,-17,-22,-27,]),'EQUAL':([2,],[10,]),'PLUS':([2,3,4,6,7,8,21,22,23,24,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,],[-19,11,16,-24,-25,-26,-20,-19,11,11,-5,-4,-9,-7,11,16,-15,-13,-18,-16,-6,-8,11,-14,-23,-17,-22,-27,]),'EXPONENTIAL':([2,3,4,6,7,8,21,22,23,24,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,],[-19,13,18,-24,-25,-26,-20,-19,13,13,-5,-4,-9,-7,13,18,-15,-13,-18,-16,-6,-8,13,-14,-23,-17,-22,-27,]),'MULTIPLY':([2,3,4,6,7,8,21,22,23,24,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,],[-19,14,19,-24,-25,-26,-20,-19,14,14,14,45,14,45,14,45,-15,-13,-18,-16,14,14,14,-14,-23,-17,-22,-27,]),'DIVIDE':([2,3,4,6,7,8,21,22,23,24,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,],[-19,15,20,-24,-25,-26,-20,-19,15,15,15,44,15,44,15,44,-15,-13,-18,-16,15,15,15,-14,-23,-17,-22,-27,]),'RPAREN':([4,6,7,8,21,22,23,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,],[-21,-24,-25,-26,-20,-19,43,-5,-4,-9,-7,-12,-10,-15,-13,-18,-16,-6,-8,-11,-14,-23,-17,-22,-27,]),'STRING':([10,],[25,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'stmt':([0,],[1,]),'expression':([0,5,9,10,11,12,13,14,15,16,17,18,19,20,44,45,],[3,21,23,24,26,28,30,32,34,36,37,38,39,41,41,39,]),'term':([0,5,9,10,11,12,13,14,15,16,17,18,19,20,44,45,],[4,4,4,4,27,29,31,33,35,4,4,4,4,4,4,4,]),'factor':([0,5,9,10,11,12,13,14,15,16,17,18,19,20,44,45,],[6,6,6,6,6,6,6,6,6,6,6,6,40,42,42,40,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> stmt","S'",1,None,None,None),
  ('stmt -> WORD EQUAL expression','stmt',3,'p_stmt_op','yaccc(NEW ONE).py',35),
  ('stmt -> WORD EQUAL STRING','stmt',3,'p_stmt_op','yaccc(NEW ONE).py',36),
  ('stmt -> expression','stmt',1,'p_stmt_def','yaccc(NEW ONE).py',44),
  ('expression -> expression PLUS term','expression',3,'p_express_operation','yaccc(NEW ONE).py',52),
  ('expression -> expression PLUS expression','expression',3,'p_express_operation','yaccc(NEW ONE).py',53),
  ('expression -> term PLUS expression','expression',3,'p_express_operation','yaccc(NEW ONE).py',54),
  ('expression -> expression MINUS term','expression',3,'p_express_operation','yaccc(NEW ONE).py',55),
  ('expression -> term MINUS expression','expression',3,'p_express_operation','yaccc(NEW ONE).py',56),
  ('expression -> expression MINUS expression','expression',3,'p_express_operation','yaccc(NEW ONE).py',57),
  ('expression -> expression EXPONENTIAL term','expression',3,'p_express_operation','yaccc(NEW ONE).py',58),
  ('expression -> term EXPONENTIAL expression','expression',3,'p_express_operation','yaccc(NEW ONE).py',59),
  ('expression -> expression EXPONENTIAL expression','expression',3,'p_express_operation','yaccc(NEW ONE).py',60),
  ('expression -> expression MULTIPLY term','expression',3,'p_express_operation','yaccc(NEW ONE).py',61),
  ('expression -> term MULTIPLY expression','expression',3,'p_express_operation','yaccc(NEW ONE).py',62),
  ('expression -> expression MULTIPLY expression','expression',3,'p_express_operation','yaccc(NEW ONE).py',63),
  ('expression -> expression DIVIDE term','expression',3,'p_express_operation','yaccc(NEW ONE).py',64),
  ('expression -> term DIVIDE expression','expression',3,'p_express_operation','yaccc(NEW ONE).py',65),
  ('expression -> expression DIVIDE expression','expression',3,'p_express_operation','yaccc(NEW ONE).py',66),
  ('expression -> WORD','expression',1,'p_expression_word','yaccc(NEW ONE).py',91),
  ('expression -> MINUS expression','expression',2,'p_expression_uminus','yaccc(NEW ONE).py',117),
  ('expression -> term','expression',1,'p_express_def','yaccc(NEW ONE).py',124),
  ('term -> term DIVIDE factor','term',3,'p_term_operation','yaccc(NEW ONE).py',131),
  ('term -> term MULTIPLY factor','term',3,'p_term_operation','yaccc(NEW ONE).py',132),
  ('term -> factor','term',1,'p_term_def','yaccc(NEW ONE).py',147),
  ('factor -> NUMBER','factor',1,'p_factor_def','yaccc(NEW ONE).py',154),
  ('factor -> FLOATNUMBER','factor',1,'p_factor_def','yaccc(NEW ONE).py',155),
  ('factor -> LPAREN expression RPAREN','factor',3,'p_factor_def','yaccc(NEW ONE).py',156),
]
